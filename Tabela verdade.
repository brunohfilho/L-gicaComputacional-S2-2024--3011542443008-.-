
print(" p | q | r | s | p→q| r→s | p∨r| (p→q)∧(r→s)∧(p∨r) | q∨s |  ((p→q)∧(r→s)∧(p∨r)) → (q∨s) ")
print("---------------------------------------------------------------------------------------------------")

for p in [0, 1]:
    for q in [0, 1]:
        for r in [0, 1]:
            for s in [0, 1]:
                # Etapas intermediárias
                p_implica_q = not p or q  # p → q
                r_implica_s = not r or s  # r → s
                p_ou_r = p or r           # p ∨ r
                q_ou_s = q or s           # q ∨ s

                # (p → q) ∧ (r → s) ∧ (p ∨ r)
                parte_esquerda = p_implica_q and r_implica_s and p_ou_r

                # Resultado final: ((p → q) ∧ (r → s) ∧ (p ∨ r)) → (q ∨ s)
                resultado = not parte_esquerda or q_ou_s

                # Função para converter 0/1 em 'F' ou 'V'
                def bool_str(valor):
                    return 'V' if valor else 'F'

                # Imprime cada linha da tabela com todas as etapas em 'V' ou 'F'
                print(f" {bool_str(p)} | {bool_str(q)} | {bool_str(r)} | {bool_str(s)} |  {bool_str(p_implica_q)}  |  {bool_str(r_implica_s)}  |  {bool_str(p_ou_r)}  |           {bool_str(parte_esquerda)}         |  {bool_str(q_ou_s)}  |             {bool_str(resultado)}")

#TRABALHO FINALIZADO